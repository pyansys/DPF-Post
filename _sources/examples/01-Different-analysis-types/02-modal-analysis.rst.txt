
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-Different-analysis-types/02-modal-analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-Different-analysis-types_02-modal-analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-Different-analysis-types_02-modal-analysis.py:


.. _ref_modal_analysis:

ANSYS DPF-Post: Modal Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This tutorial shows how post-process a modal analysis result file
using API of the POST module.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Get started
~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    from ansys.dpf import post
    from ansys.dpf.post import examples









.. GENERATED FROM PYTHON SOURCE LINES 18-22

Get the solution object
~~~~~~~~~~~~~~~~~~~~~~~
The following file is the result of a modal analysis computed
using Ansys Mechanical

.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: default

    example_path = examples.download_all_kinds_of_complexity_modal()

    # here we load the solution
    solution = post.load_solution(example_path)
    print(solution)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Modal solution object.


    Data Sources
    ------------------------------
    DPF data_sources with result key: rst
    paths: {'rst': ['/dpf/_cache/testing/modal_allKindOfComplexity.rst']}


    DPF Model
    ------------------------------
    Modal analysis
    Unit system: Metric (m, kg, N, s, V, A)
    Physics Type: Mecanic
    Available results:
         -  displacement                  
         -  force                         
         -  element_nodal_forces          
         -  stress                        
         -  volume                        
         -  energy_stiffness_matrix       
         -  hourglass_energy              
         -  thermal_dissipation_energy    
         -  kinetic_energy                
         -  co_energy                     
         -  incremental_energy            
         -  strain                        
         -  temperature                   
    ------------------------------
    Meshed Region
            2388 nodes
            1824 elements
            Unit: m 
    ------------------------------
    Time/Frequency Info:
            Number of sets: 45

    With complex values
 
     Cumulative   Frequency (Hz)    Loadstep     Substep   
         1           4.8e+03           1            1      
         2           6.47e+03          1            2      
         3           1.01e+04          1            3      
         4           1.54e+04          1            4      
         5           1.99e+04          1            5      
         6           3.07e+04          1            6      
         7           3.35e+04          1            7      
         8           4.05e+04          1            8      
         9           4.11e+04          1            9      
         10          4.17e+04          1            10     
         11          4.26e+04          1            11     
         12          4.88e+04          1            12     
         13          5.16e+04          1            13     
         14          5.48e+04          1            14     
         15          5.51e+04          1            15     
         16          5.55e+04          1            16     
         17          5.58e+04          1            17     
         18          5.63e+04          1            18     
         19          5.66e+04          1            19     
         20          5.75e+04          1            20     
         21          5.78e+04          1            21     
         22          6.01e+04          1            22     
         23          6.23e+04          1            23     
         24          6.28e+04          1            24     
         25          6.42e+04          1            25     
         26          6.49e+04          1            26     
         27          6.65e+04          1            27     
         28          6.67e+04          1            28     
         29          6.75e+04          1            29     
         30          6.87e+04          1            30     
         31          7.01e+04          1            31     
         32          7.14e+04          1            32     
         33          7.18e+04          1            33     
         34          7.32e+04          1            34     
         35          7.49e+04          1            35     
         36          7.51e+04          1            36     
         37          7.63e+04          1            37     
         38          7.66e+04          1            38     
         39          7.7e+04           1            39     
         40          7.78e+04          1            40     
         41          7.85e+04          1            41     
         42          7.87e+04          1            42     
         43          7.93e+04          1            43     
         44          8.03e+04          1            44     
         45          8.08e+04          1            45     

    This may contain complex results.




.. GENERATED FROM PYTHON SOURCE LINES 29-31

Get result objects
~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 33-35

Get a displacement result
=========================

.. GENERATED FROM PYTHON SOURCE LINES 37-39

**Get the result**: it will contain a field for real values and a
field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default

    disp_result = solution.displacement()
    disp = disp_result.vector








.. GENERATED FROM PYTHON SOURCE LINES 43-44

**Check the number of fields**

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    disp.num_fields





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 47-48

**Get data from a field**

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    disp.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-1.17102876, -1.30206342, -1.1938849 ],
           [-1.69750554, -1.68258886, -0.76327262],
           [-2.24465543, -2.66699745, -1.36365734],
           ...,
           [ 0.        ,  0.        ,  0.        ],
           [ 0.        ,  0.        ,  0.        ],
           [ 0.        ,  0.        ,  0.        ]])



.. GENERATED FROM PYTHON SOURCE LINES 51-52

**Get maximum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    disp.max_data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[3.63870030e+05, 8.31378342e+20, 5.99358159e+21]])



.. GENERATED FROM PYTHON SOURCE LINES 55-56

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    disp.min_data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-3.55151557e+05, -8.31378342e+20, -5.99358159e+21]])



.. GENERATED FROM PYTHON SOURCE LINES 59-60

**Get maximum data value over a targeted field**

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: default

    disp.get_max_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([3.63870030e+05, 8.31378342e+20, 5.99358159e+21])



.. GENERATED FROM PYTHON SOURCE LINES 63-64

**Get minimum data value over all fields**

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    disp.get_min_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([-3.55151557e+05, -8.31378342e+20, -5.99358159e+21])



.. GENERATED FROM PYTHON SOURCE LINES 67-69

Get a stress result and deals with amplitude
============================================

.. GENERATED FROM PYTHON SOURCE LINES 71-73

**Get the result**: it will contain a field for real values and a 
field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: default

    stress_result = solution.stress()








.. GENERATED FROM PYTHON SOURCE LINES 76-77

**Check if the support has complex frequencies**

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: default

    stress_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 80-81

**Get the tensor result**

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: default

    stress = stress_result.tensor
    stress.num_fields





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 85-86

**Get the shell field**

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: default

    shell_field = stress[0]
    shell_field.shell_layers





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <ShellLayers.NONELAYER: 5>



.. GENERATED FROM PYTHON SOURCE LINES 90-91

**Get the solid field field**

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    solid_field = stress[1]








.. GENERATED FROM PYTHON SOURCE LINES 94-95

**Plot the amplitude contour**

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: default

    amplitude = stress_result.tensor_amplitude
    stress.plot_contour()




.. image:: /examples/01-Different-analysis-types/images/sphx_glr_02-modal-analysis_001.png
    :alt: 02 modal analysis
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-101

Get an elastic_strain result and deals with phase
=================================================

.. GENERATED FROM PYTHON SOURCE LINES 103-105

**Get the result**: it will contain a field for real values and a
field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 105-110

.. code-block:: default

    elastic_strain_result = solution.elastic_strain()
    elastic_strain = elastic_strain_result.tensor
    # shell and solid elements are in distinct fields.
    elastic_strain.num_fields





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 111-113

**It is also possible to deal with plastic_strain and temperature this way.**
The result file must contain those results.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.488 seconds)


.. _sphx_glr_download_examples_01-Different-analysis-types_02-modal-analysis.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-modal-analysis.py <02-modal-analysis.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-modal-analysis.ipynb <02-modal-analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
